# Bresenham's Line Drawing Algorithm 
# By Aubrey Fields
# 10/1/2022

# This version of Bresenham's Alg only works if x0 < x1 and y0 < y1

# Declare variable addresses (just for compiler)
var dx r0
var dy r1
var D r2
var y r3

var x0 r0
var x1 r1
var y0 r3
var y1 r2

var x r1
var y r3

var memDY m0
var memX m1
var count m2

# Set values for x0 and x1
lit x0 2
lit x1 12

# save the value of x0
mov memX x0

# calculate dx (difference in x values)
sub dx x1 x0 false

# save the dx as count
mov count dx

# take inputs y0 and y1
lit y0 3
lit y1 8

# calculate dy (difference in y values)
sub dy y1 y0 false

# save dy to RAM
mov memDY dy

# calculate D (D = 2dy - dx)
add D dy dy false # Used to be lsh D dy false
sub D D dx false
 
@mainLoop
	mov count x
	mov x memX
	
	# Plot point
	mov plotx x
	mov ploty y
	lit disp '\p'
	
	# increment x for next iteration then save to RAM
	inc x x false
	mov memX x

	# jump to @skipSubroutine if D > 0
	jlt @skipSubroutine disp D false
	inc y y false
	add x dx dx false # Used to be lsh x dx false
	sub D D x false
	
	@skipSubroutine
	# recall value for dy
	mov dy memDY

	# multiply dy by 2, add it to D, set that to new D value
	add dy dy dy false # Used to be lsh dy dy false
	add D D dy false

	# if count > 0, then loop, else continue to halt
	mov x count
	dec x x false
	jlt @mainLoop disp x false
hlt